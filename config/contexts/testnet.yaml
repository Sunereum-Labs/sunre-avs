# Testnet Configuration for SunRe AVS
# This file contains configuration for deploying to Holesky testnet

version: 0.1.0

# Network configuration
network:
  name: holesky
  chain_id: 17000
  rpc_url: ${TESTNET_RPC_URL:-https://ethereum-holesky.publicnode.com}
  explorer: https://holesky.etherscan.io

# EigenLayer contracts on Holesky
eigenlayer:
  delegation_manager: "0xA44151489861Fe9e3055d95adC98FbD462B948e7"
  avs_directory: "0x055733000064333CaDDbC92763c58BF0192fFeBf"
  strategy_manager: "0xdfB5f6CE42aAA7830E94ECFCcAd411beF4d4D5b6"
  slasher: "0xcAe751b75833ef09627549868A04E32679386e7C"
  rewards_coordinator: "0xAcc1fb458a1317E886dB376Fc8141540537E68fE"
  allocation_manager: "0x1B7b8f6d258f7dFCf51cda8E308c1760dE7e8e1B"

# AVS-specific configuration
avs:
  name: "SunRe Weather Insurance AVS"
  metadata_uri: "https://sunre-avs.com/metadata.json"
  
  # Operator requirements
  operator:
    min_stake: "32000000000000000000" # 32 ETH minimum stake
    max_operators: 100
    registration_delay: 7200 # 2 hours
    
  # Task configuration
  task:
    response_window_blocks: 50 # ~10 minutes on Holesky
    task_challenge_window_blocks: 100 # ~20 minutes
    aggregation_threshold_percentage: 67 # 67% quorum
    
  # Economic parameters
  economics:
    task_fee: "1000000000000000" # 0.001 ETH per task
    operator_reward_percentage: 80 # 80% to operators
    protocol_fee_percentage: 20 # 20% to protocol

# Deployment configuration
deployment:
  # Gas settings for Holesky
  gas:
    max_fee_per_gas: "30000000000" # 30 gwei
    max_priority_fee: "2000000000" # 2 gwei
    gas_limit_multiplier: 1.2
    
  # Contract verification
  verify:
    enabled: true
    etherscan_api_key: ${ETHERSCAN_API_KEY}
    
  # Deployment order
  contracts:
    - name: "TaskAVSRegistrar"
      path: "src/l1-contracts/TaskAVSRegistrar.sol"
      constructor_args:
        - ${AVS_ADDRESS}
        - ${ALLOCATION_MANAGER}
        
    - name: "AVSTaskHook"
      path: "src/l2-contracts/AVSTaskHook.sol"
      
    - name: "BN254CertificateVerifier"
      path: "src/l2-contracts/BN254CertificateVerifier.sol"

# Operator configuration
operators:
  # Operator endpoints for testnet
  endpoints:
    - name: "operator-1"
      url: "https://operator1.sunre-testnet.com"
      address: "0x..." # To be filled after registration
      
    - name: "operator-2"
      url: "https://operator2.sunre-testnet.com"
      address: "0x..."
      
    - name: "operator-3"
      url: "https://operator3.sunre-testnet.com"
      address: "0x..."
      
  # Operator registration parameters
  registration:
    quorum_numbers: [0] # Single quorum for weather consensus
    socket: "https://operators.sunre-avs.com"
    params:
      max_operator_count: 100
      kick_registry: true
      stake_registry: true

# Monitoring and telemetry
monitoring:
  # Metrics endpoint
  metrics:
    enabled: true
    port: 9090
    path: "/metrics"
    
  # OpenTelemetry
  otlp:
    enabled: true
    endpoint: ${OTLP_ENDPOINT:-localhost:4317}
    service_name: "sunre-avs-testnet"
    
  # Grafana dashboard
  grafana:
    enabled: true
    dashboard_id: "sunre-avs-testnet"
    datasource: "prometheus-testnet"

# Security configuration
security:
  # Key management
  keys:
    operator_key_path: ${OPERATOR_KEY_PATH:-./keys/operator.key}
    bls_key_path: ${BLS_KEY_PATH:-./keys/bls.key}
    use_remote_signer: false
    remote_signer_url: ${REMOTE_SIGNER_URL}
    
  # Access control
  access:
    admin_addresses:
      - ${ADMIN_ADDRESS}
    authorized_submitters:
      - ${INSURANCE_CONTRACT_ADDRESS}
      
  # Rate limiting
  rate_limits:
    tasks_per_block: 10
    tasks_per_operator_per_hour: 100

# Insurance integration
insurance:
  # Parametric insurance configuration
  parameters:
    min_coverage: "100000000000000000" # 0.1 ETH
    max_coverage: "100000000000000000000" # 100 ETH
    premium_percentage: 2 # 2% of coverage
    
  # Weather triggers
  triggers:
    - type: "temperature"
      threshold_celsius: 40
      payout_percentage: 100
      
    - type: "precipitation"
      threshold_mm: 200
      payout_percentage: 80
      
    - type: "wind_speed"
      threshold_kmh: 120
      payout_percentage: 90

# Testing configuration
testing:
  # Enable test mode features
  test_mode: ${TEST_MODE:-false}
  
  # Mock data sources
  mock_weather: ${MOCK_WEATHER:-false}
  
  # Test accounts (Holesky faucet funded)
  test_accounts:
    - address: "0x..." # Test operator 1
      private_key: ${TEST_OPERATOR_1_KEY}
      
    - address: "0x..." # Test operator 2
      private_key: ${TEST_OPERATOR_2_KEY}

# Logging configuration
logging:
  level: ${LOG_LEVEL:-info}
  format: json
  output: stdout
  
  # Log aggregation
  aggregation:
    enabled: true
    endpoint: ${LOG_AGGREGATION_ENDPOINT}
    
# Alerts configuration
alerts:
  enabled: true
  
  # Alert channels
  channels:
    - type: webhook
      url: ${ALERT_WEBHOOK_URL}
      severity: critical
      
    - type: email
      recipients: ${ALERT_EMAILS}
      severity: warning
      
  # Alert rules
  rules:
    - name: "operator_offline"
      condition: "operator_response_time > 60s"
      severity: warning
      
    - name: "consensus_failure"
      condition: "consensus_success_rate < 0.95"
      severity: critical
      
    - name: "high_gas_price"
      condition: "gas_price > 100 gwei"
      severity: warning

# Maintenance windows
maintenance:
  # Scheduled maintenance windows (UTC)
  windows:
    - day: sunday
      start: "02:00"
      duration: "2h"
      
# Notes for testnet deployment
notes: |
  1. Ensure you have Holesky ETH from the faucet
  2. Register operators before starting the AVS
  3. Monitor gas prices on Holesky
  4. Use testnet-specific RPC endpoints for reliability
  5. Keep operator keys secure even on testnet